function [link_out] = kineticCoeff(link_in, input_d)
% kineticCoeff: COMPUTE KINETIC COEFFICIENTS OF LINKAGE
%
% [link_out] = kineticCoeff(link_in, input_d): adds kinetic coefficients of a
% mechanism, A & B to the linkage stuct array using finite differential.
% link is a struct array with field angles, cog_i and cog.
% intput_d is a vector

    % Transfer all data to output variable
    link_out = link_in;

    %% First order kinetic coefficient

    % Angular
    ang_coeff_1_tmp = arrayfun(...
        @(idx) (...
            link_out(idx).angle...
            - [link_out(idx).angle(end), link_out(idx).angle(1: end - 1)]...
        )...
        ./ input_d,...
        1: length(link_out),...
        'uni', 0 ...
    );
    % Use median filter to remove singularities
    ang_coeff_1_tmp = cellfun(@(x) medfilt1(x, 10), ang_coeff_1_tmp, 'uni', 0);

    % Record coefficients
    [link_out.ang_coeff_1] = ang_coeff_1_tmp{:};

    % COG
    cog_coeff_1_tmp =  arrayfun(...
        @(idx) (...
            link_out(idx).cog...
            - [link_out(idx).cog(end, :); link_out(idx).cog(1: end - 1, :)]...
        )...
        ./ [input_d; input_d].',...
        1: length(link_out),...
        'uni', 0 ...
    );

    % Use median filter to remove singularities
    cog_coeff_1_tmp = cellfun(@(x) medfilt1(x, 10), cog_coeff_1_tmp, 'uni', 0);

    % Record coefficients
    [link_out.cog_coeff_1] = cog_coeff_1_tmp{:};

    %% Second order kinetic coefficient

    % Angular
    ang_coeff_2_tmp = arrayfun(...
        @(idx) (...
            link_out(idx).ang_coeff_1...
            - [...
                link_out(idx).ang_coeff_1(end),...
                link_out(idx).ang_coeff_1(1: end - 1)...
            ]...
        )...
        ./ input_d,...
        1: length(link_out),...
        'uni', 0 ...
    );

    % Use median filter to remove singularities
    ang_coeff_2_tmp = cellfun(@(x) medfilt1(x, 10), ang_coeff_2_tmp, 'uni', 0);

    % Record coefficients
    [link_out.ang_coeff_2] = ang_coeff_2_tmp{:};

    % COG
    cog_coeff_2_tmp = arrayfun(...
        @(idx) (...
            link_out(idx).cog_coeff_1...
            - [link_out(idx).cog_coeff_1(end, :); link_out(idx).cog_coeff_1(1: end - 1, :)]...
        )...
        ./ [input_d; input_d].',...
        1: length(link_out),...
        'uni', 0 ...
    );

    % Use median filter to remove singularities
    cog_coeff_2_tmp = cellfun(@(x) medfilt1(x, 10), cog_coeff_2_tmp, 'uni', 0);

    % Record coefficients
    [link_out.cog_coeff_2] = cog_coeff_2_tmp{:};

    %% A
    A_tmp = arrayfun(...
        @(idx) (link_out(idx).mass...
        .* arrayfun(...
            @(row_idx) norm(link_out(idx).cog_coeff_1(row_idx, :))^2,...
            1: length(link_out(idx).cog_coeff_1))...
        + link_out(idx).I_G .* link_out(idx).ang_coeff_1.^2).',...
        1: length(link_out),...
        'uni', 0 ...
    );
    [link_out.A] = A_tmp{:};

    %% B
    B_tmp = arrayfun(...
        @(idx) link_out(idx).mass...
        .* (...
            link_out(idx).cog_coeff_1(:, 1)...
                .* link_out(idx).cog_coeff_2(:, 1)...
            + link_out(idx).cog_coeff_1(:, 2)...
                .* link_out(idx).cog_coeff_2(:, 2)...
        )...
        + link_out(idx).I_G...
        .* transpose(...
            link_out(idx).ang_coeff_1 .* link_out(idx).ang_coeff_2...
        ),...
        1: length(link_out),...
        'uni', 0 ...
    );
    [link_out.B] = B_tmp{:};

end  % kineticCoeff
